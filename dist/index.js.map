{"version":3,"sources":["../src/index.js"],"names":["Shorthand","expr","includes","split","map","join","key","val","ArrayShorthand","Function","constructor","arr","Proxy","get","target","prop","arrayProp","_inner","bind","apply","thisArg","args","filter","Ash"],"mappings":";;;;;AAAA,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AACrB;;AAEA;AACA,QAAGA,KAAKC,QAAL,CAAc,GAAd,CAAH,EAAsB;AAClB,eAAOD,KAAKE,KAAL,CAAW,GAAX,EAAgBC,GAAhB,CAAoBJ,SAApB,EAA+BK,IAA/B,CAAoC,MAApC,CAAP;AACH;;AAED;AACA,QAAGJ,KAAKC,QAAL,CAAc,GAAd,CAAH,EAAsB;AAClB,YAAI,CAACI,GAAD,EAAMC,GAAN,IAAaN,KAAKE,KAAL,CAAW,GAAX,CAAjB;AACA,eAAQ,MAAKG,GAAI,SAAQC,GAAI,EAA7B;AACH;AACJ;;AAED,MAAMC,cAAN,SAA6BC,QAA7B,CAAsC;AAClCC,gBAAY,GAAGC,GAAf,EAAmB;AACf;;AAEA,eAAO,IAAIC,KAAJ,CAAU,IAAV,EAAgB;AACnBC,iBAAK,CAACC,MAAD,EAASC,IAAT,KAAkB;AACnB,sBAAMC,YAAY,KAAKC,MAAL,CAAYF,IAAZ,CAAlB;AACA,oBAAGC,SAAH,EAAa;AACT,wBAAG,OAAOA,SAAP,IAAoB,UAAvB,EACI,OAAOA,UAAUE,IAAV,CAAe,KAAKD,MAApB,CAAP,CADJ,KAGI,OAAOD,SAAP;AACP;AACJ,aATkB;AAUnBG,mBAAO,CAACL,MAAD,EAASM,OAAT,EAAkBC,IAAlB,KAA2B;AAC9B;AACA,oBAAI,CAACpB,IAAD,IAASoB,IAAb;AACA,oBAAG,CAACpB,IAAJ,EACI,OAAOU,GAAP;;AAEJ;AACA,oBAAG,OAAOV,IAAP,IAAe,UAAlB,EACI,OAAOU,IAAIW,MAAJ,CAAWrB,IAAX,CAAP;;AAEJ,uBAAOU,IAAIW,MAAJ,CAAW,IAAIb,QAAJ,CAAa,GAAb,EAAmB,UAAST,UAAUC,IAAV,CAAgB,EAA5C,CAAX,CAAP;AACH;AArBkB,SAAhB,CAAP;AAuBH;AA3BiC;;QA8BXsB,G,GAAlBf,c","file":"index.js","sourcesContent":["function Shorthand(expr) {\r\n    // console.log(`=>${expr}`)\r\n\r\n    // , for and conditions\r\n    if(expr.includes(\",\")){\r\n        return expr.split(\",\").map(Shorthand).join(\" && \")\r\n    }\r\n\r\n    // key=val filter shorthand \r\n    if(expr.includes(\"=\")){\r\n        let [key, val] = expr.split(\"=\")\r\n        return `x[\"${key}\"] == ${val}`\r\n    }\r\n}\r\n\r\nclass ArrayShorthand extends Function {\r\n    constructor(...arr){\r\n        super()\r\n\r\n        return new Proxy(this, {\r\n            get: (target, prop) => {\r\n                const arrayProp = this._inner[prop]\r\n                if(arrayProp){\r\n                    if(typeof arrayProp == \"function\")\r\n                        return arrayProp.bind(this._inner)\r\n                    else\r\n                        return arrayProp\r\n                }\r\n            },\r\n            apply: (target, thisArg, args) => {\r\n                // return Shorthand(this._inner, ...args)\r\n                let [expr] = args\r\n                if(!expr)\r\n                    return arr\r\n                \r\n                // fn filter shorthand\r\n                if(typeof expr == \"function\")\r\n                    return arr.filter(expr)\r\n\r\n                return arr.filter(new Function(\"x\", `return ${Shorthand(expr)}`))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport { ArrayShorthand as Ash }\r\n"]}