{"version":3,"sources":["../src/index.js"],"names":["Shorthand","arr","expr","filter","includes","split","forEach","subExpr","key","val","x","ArrayShorthand","Function","constructor","_inner","Proxy","get","target","prop","arrayProp","bind","apply","thisArg","args","Ash"],"mappings":";;;;;AAAA,SAASA,SAAT,CAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AAC1B,QAAG,CAACA,IAAJ,EACI,OAAOD,GAAP;;AAEJ;AACA,QAAG,OAAOC,IAAP,IAAe,UAAlB,EACI,OAAOD,IAAIE,MAAJ,CAAWD,IAAX,CAAP;;AAEJ;AACA,QAAGA,KAAKE,QAAL,CAAc,GAAd,CAAH,EAAsB;AAClBF,aAAKG,KAAL,CAAW,GAAX,EAAgBC,OAAhB,CAAwBC,WAAW;AAC/BN,kBAAMD,UAAUC,GAAV,EAAeM,OAAf,CAAN;AACH,SAFD;AAGA,eAAON,GAAP;AACH;;AAED;AACA,QAAGC,KAAKE,QAAL,CAAc,GAAd,CAAH,EAAsB;AAClB,YAAI,CAACI,GAAD,EAAMC,GAAN,IAAaP,KAAKG,KAAL,CAAW,GAAX,CAAjB;AACA,eAAOJ,IAAIE,MAAJ,CAAWO,KAAKA,EAAEF,GAAF,KAAUC,GAA1B,CAAP;AACH;AACJ;;AAED,MAAME,cAAN,SAA6BC,QAA7B,CAAsC;AAClCC,gBAAY,GAAGZ,GAAf,EAAmB;AACf;AACA,aAAKa,MAAL,GAAc,CAAC,GAAGb,GAAJ,CAAd;;AAEA,eAAO,IAAIc,KAAJ,CAAU,IAAV,EAAgB;AACnBC,iBAAK,CAACC,MAAD,EAASC,IAAT,KAAkB;AACnB,sBAAMC,YAAY,KAAKL,MAAL,CAAYI,IAAZ,CAAlB;AACA,oBAAGC,SAAH,EAAa;AACT,wBAAG,OAAOA,SAAP,IAAoB,UAAvB,EACI,OAAOA,UAAUC,IAAV,CAAe,KAAKN,MAApB,CAAP,CADJ,KAGI,OAAOK,SAAP;AACP;AACJ,aATkB;AAUnBE,mBAAO,CAACJ,MAAD,EAASK,OAAT,EAAkBC,IAAlB,KAA2B;AAC9B,uBAAOvB,UAAU,KAAKc,MAAf,EAAuB,GAAGS,IAA1B,CAAP;AACH;AAZkB,SAAhB,CAAP;AAcH;AAnBiC;;QAsBXC,G,GAAlBb,c","file":"index.js","sourcesContent":["function Shorthand(arr, expr) {\r\n    if(!expr)\r\n        return arr\r\n    \r\n    // fn filter shorthand\r\n    if(typeof expr == \"function\")\r\n        return arr.filter(expr)\r\n\r\n    // , for and conditions\r\n    if(expr.includes(\",\")){\r\n        expr.split(\",\").forEach(subExpr => {\r\n            arr = Shorthand(arr, subExpr)\r\n        })\r\n        return arr\r\n    }\r\n\r\n    // key=val filter shorthand \r\n    if(expr.includes(\"=\")){\r\n        let [key, val] = expr.split(\"=\")\r\n        return arr.filter(x => x[key] == val)\r\n    }\r\n}\r\n\r\nclass ArrayShorthand extends Function {\r\n    constructor(...arr){\r\n        super()\r\n        this._inner = [...arr]\r\n\r\n        return new Proxy(this, {\r\n            get: (target, prop) => {\r\n                const arrayProp = this._inner[prop]\r\n                if(arrayProp){\r\n                    if(typeof arrayProp == \"function\")\r\n                        return arrayProp.bind(this._inner)\r\n                    else\r\n                        return arrayProp\r\n                }\r\n            },\r\n            apply: (target, thisArg, args) => {\r\n                return Shorthand(this._inner, ...args)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport { ArrayShorthand as Ash }\r\n"]}